import google.generativeai as genai
import os
from dotenv import load_dotenv

# ================================
# üîπ Cargar configuraci√≥n y entorno
# ================================

def cargar_api_key():
    load_dotenv()
    api_key = os.getenv("API_KEY")

    if not api_key or not api_key.strip():
        raise ValueError("API_KEY no encontrada o vac√≠a en las variables de entorno.")

    genai.configure(api_key=api_key)


# ================================
# üîπ Definici√≥n de modelos gratuitos
# ================================

def obtener_modelos():
    return {
        1: {
            "id": "models/gemini-2.5-pro",
            "uso": "Generaci√≥n de contenido m√°s largo y complejo",
            "calidad": "Alta calidad, m√°s preciso que Flash",
            "caracter√≠stica": "Ideal para razonamiento, escritura y an√°lisis"
        },
        2: {
            "id": "models/gemini-2.5-flash",
            "uso": "Respuestas r√°pidas y eficientes con menor costo",
            "calidad": "Buen rendimiento y eficiencia de costos",
            "caracter√≠stica": "Pensamiento adaptativo, ideal para tareas frecuentes"
        },
        3: {
            "id": "models/gemini-2.5-flash-lite",
            "uso": "Procesamiento de alto volumen con bajo costo",
            "calidad": "Velocidad alta, menor carga de recursos",
            "caracter√≠stica": "Modelo m√°s rentable con buena capacidad"
        },
        4: {
            "id": "models/gemini-2.0-flash",
            "uso": "Respuestas veloces con capacidades modernas",
            "calidad": "Muy buena velocidad, soporte para streaming",
            "caracter√≠stica": "Modelo de nueva generaci√≥n, optimizado para rendimiento"
        },
        5: {
            "id": "models/gemini-2.0-flash-lite",
            "uso": "Tareas de texto simples y econ√≥micas",
            "calidad": "Rendimiento aceptable con bajos recursos",
            "caracter√≠stica": "Modelo econ√≥mico y de baja latencia"
        }
    }


# ================================
# üîπ Mostrar modelos disponibles
# ================================

def mostrar_modelos(modelos):
    print("\nüìå Modelos gratuitos disponibles:\n")
    for clave, datos in modelos.items():
        print(f"{clave}. {datos['id']}")
        print(f"   ‚Üí Uso: {datos['uso']}")
        print(f"   ‚Üí Calidad: {datos['calidad']}")
        print(f"   ‚Üí Destacado: {datos['caracter√≠stica']}\n")


# ================================
# üîπ Pedir selecci√≥n del usuario
# ================================

def seleccionar_modelo(modelos):
    try:
        eleccion = int(input("üî¢ Eleg√≠ el n√∫mero del modelo: ").strip())
        return modelos.get(eleccion)
    except ValueError:
        return None


# ================================
# üîπ Obtener prompt del usuario
# ================================

def obtener_prompt():
    texto = input("\nüìù Escrib√≠ el contenido que quer√©s generar: ").strip()
    if not texto:
        raise ValueError("‚ùå El contenido no puede estar vac√≠o.")
    return texto


# ================================
# üîπ Generar contenido con modelo
# ================================

def generar_contenido(modelo_id, prompt):
    modelo = genai.GenerativeModel(modelo_id)
    respuesta = modelo.generate_content(prompt)
    return respuesta.text


# ================================
# üîπ Funci√≥n principal
# ================================

def main():
    try:
        cargar_api_key()
        modelos = obtener_modelos()
        mostrar_modelos(modelos)

        modelo_info = seleccionar_modelo(modelos)
        if not modelo_info:
            raise ValueError("‚ùå N√∫mero de modelo no v√°lido.")

        prompt = obtener_prompt()
        respuesta = generar_contenido(modelo_info["id"], prompt)

        print("\nüìÑ Respuesta del modelo:\n")
        print(respuesta)

    except Exception as e:
        print(f"\n‚ö†Ô∏è Error: {e}")


# ================================
# üîπ Ejecutar
# ================================

if __name__ == "__main__":
    main()
