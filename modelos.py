# ================================
# üîπ Definici√≥n de modelos gratuitos
# ================================

def obtener_modelos():
    return {
        1: {
            "id": "models/gemini-2.5-pro",
            "uso": "Generaci√≥n de contenido m√°s largo y complejo",
            "calidad": "Alta calidad, m√°s preciso que Flash",
            "caracter√≠stica": "Ideal para razonamiento, escritura y an√°lisis"
        },
        2: {
            "id": "models/gemini-2.5-flash",
            "uso": "Respuestas r√°pidas y eficientes con menor costo",
            "calidad": "Buen rendimiento y eficiencia de costos",
            "caracter√≠stica": "Pensamiento adaptativo, ideal para tareas frecuentes"
        },
        3: {
            "id": "models/gemini-2.5-flash-lite",
            "uso": "Procesamiento de alto volumen con bajo costo",
            "calidad": "Velocidad alta, menor carga de recursos",
            "caracter√≠stica": "Modelo m√°s rentable con buena capacidad"
        },
        4: {
            "id": "models/gemini-2.0-flash",
            "uso": "Respuestas veloces con capacidades modernas",
            "calidad": "Muy buena velocidad, soporte para streaming",
            "caracter√≠stica": "Modelo de nueva generaci√≥n, optimizado para rendimiento"
        },
        5: {
            "id": "models/gemini-2.0-flash-lite",
            "uso": "Tareas de texto simples y econ√≥micas",
            "calidad": "Rendimiento aceptable con bajos recursos",
            "caracter√≠stica": "Modelo econ√≥mico y de baja latencia"
        }
    }


# ================================
# üîπ Mostrar modelos disponibles
# ================================

def mostrar_modelos(modelos):
    print("\nüìå Modelos gratuitos disponibles:\n")
    for clave, datos in modelos.items():
        print(f"{clave}. {datos['id']}")
        print(f"   ‚Üí Uso: {datos['uso']}")
        print(f"   ‚Üí Calidad: {datos['calidad']}")
        print(f"   ‚Üí Destacado: {datos['caracter√≠stica']}\n")
